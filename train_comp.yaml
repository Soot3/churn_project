name: Train model
inputs:
- {name: data_path}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==0.23.4' 'scikit-learn==0.22' 'numpy' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'pandas==0.23.4' 'scikit-learn==0.22'
      'numpy' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      echo -n "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def train_model(data_path):\n    import sys, subprocess\n    subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"scikit-learn==0.22\"])\n    subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"numpy\"])\n    subprocess.run([sys.executable,\
      \ \"-m\", \"pip\", \"install\", \"pandas\"])\n    import numpy as np\n    import\
      \ pandas as pd\n    import pickle\n    from sklearn.ensemble import RandomForestClassifier\n\
      \    with open(f'{data_path}/split_data','rb') as f:\n        data = pickle.load(f)\n\
      \    (print('Reading----'))\n    rfcla = RandomForestClassifier(n_estimators=78,random_state=9,n_jobs=27,max_features=\
      \ 'auto')\n    rfcla.fit(data[\"train\"][\"X\"], data[\"train\"][\"y\"])\n \
      \   (print('Fitting----'))\n    with open(f'{data_path}/fit_model','wb') as\
      \ f:\n        pickle.dump((rfcla),f)\n\n    if __name__ == '__main__':\n   \
      \   kfp.components.create_component_from_func(train_model)\n      output_component_file\
      \ = 'train_comp.yaml'\n      base_image = 'python:3.7'\n      packages_to_install\
      \ = ['pandas==0.23.4','scikit-learn==0.22','numpy']      \n\n    return (print('Done!'))\n\
      \nimport argparse\n_parser = argparse.ArgumentParser(prog='Train model', description='')\n\
      _parser.add_argument(\"--data-path\", dest=\"data_path\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
      _outputs = train_model(**_parsed_args)\n"
    args:
    - --data-path
    - {inputValue: data_path}
